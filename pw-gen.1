<<<<<<< HEAD
.TH pw-gen 1 "03-01-2018" "version 0.5.1"
=======
.TH pw-gen 1 "12-04-2018" "version 0.5.1"
>>>>>>> 5fc3506071b23b41be99fe74f179c5caeb3a9ce2
.SH NAME
pw-gen: a simple password generator and searchable database
.SH SYNOPSIS
.B pw-gen -f [
<<<<<<< HEAD
.I sitename
=======
.I "sitename"
>>>>>>> 5fc3506071b23b41be99fe74f179c5caeb3a9ce2
.B ]
.PP
.B pw-gen -L [
.I options
.B ]
.PP
.B pw-gen -S [
.I options
.B ]
.PP
.B pw-gen -R [
.I options
.B ]
.SH DESCRIPTION
This program is a simple password manager, it manages a database of passwords and allows you to enter and view entries 
(as you'd expect).
.SH OPTIONS
.PP
.B -f [
.I sitename
.B ]
: calls up information on the site you entered. If there's nothing in the database, it will report that back as well
.PP
.B -L
: generates a long password: 3 random words strung together with a dash in between them, and prints it to stdout and 
saves it. Taken from the default word list included, but the dictionary file can be changed in the settings file

.B -S
: generates a "short" password (8-9 characters), using my custom
algorithm

.B -R [
.I length
.B ]
: generates a random series of valid characters of default length 10
The default "illegal character" list is saved in the settings file, but it can be overridden using the i flag
.PP
.B -i [
.I string
.B ]
: overrides the default "illegal character" list, using 
.I string
instead.
.PP
.B -l [
.I size
.B ]
: overrides the default size of the random password, and
sets it to 
.I size
instead.
.PP
.B -e [
.I email
.B ]
: record the provided
.I email
in a field in the database
.PP
.B -u [
.I username
.B ]
: records the provided
.I username
in a field in the database
